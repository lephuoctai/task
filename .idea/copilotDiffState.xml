<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/todo/task/Task.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/todo/task/Task.java" />
              <option name="originalContent" value="package com.todo.task;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class Task {&#10;    private String name;                  // Tên nhiệm vụ&#10;    private String quest;                 // Nội dung hoặc mô tả nhiệm vụ&#10;    private LocalDateTime dateBegin;     // Ngày bắt đầu nhiệm vụ&#10;    private LocalDateTime dateCompleted; // Hạn chót hoàn thành nhiệm vụ&#10;    private String group;                // Nhóm nhiệm vụ&#10;    private LocalDateTime updatedAt; // Thời gian chỉnh sửa gần nhất&#10;&#10;    // Constructor đầy đủ&#10;    public Task(String name, String quest, String dateBeginStr, String dateCompletedStr, String group) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.group = group;&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Constructor chỉ có ngày hoàn thành&#10;    public Task(String name, String quest, String dateCompletedStr) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = LocalDateTime.now();&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Chuyển chuỗi định dạng &quot;HH:mm dd-MM-yyyy&quot; thành LocalDateTime&#10;    private LocalDateTime parseDateTime(String dateStr) {&#10;        if (dateStr == null || dateStr.trim().isEmpty()) {&#10;            return null;&#10;        }&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm dd-MM-yyyy&quot;);&#10;        return LocalDateTime.parse(dateStr, formatter);&#10;    }&#10;&#10;    // Getter tên nhiệm vụ&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    // Getter nội dung&#10;    public String getQuest() {&#10;        return quest;&#10;    }&#10;&#10;    // Trả về ngày bắt đầu dưới dạng chuỗi&#10;    public String getDateBegin() {&#10;        return formatDateTime(dateBegin);&#10;    }&#10;&#10;    // Trả về ngày hoàn thành dưới dạng chuỗi&#10;    public String getDateCompleted() {&#10;        return formatDateTime(dateCompleted);&#10;    }&#10;&#10;    // Getter nhóm&#10;    public String getGroup() {&#10;        return group;&#10;    }&#10;&#10;    // Getter thời gian chỉnh sửa&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // Setter tên&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    // Setter nội dung&#10;    public void setQuest(String quest) {&#10;        this.quest = quest;&#10;    }&#10;&#10;    // Setter nhóm&#10;    public void setGroup(String group) {&#10;        this.group = group;&#10;    }&#10;&#10;    // Setter ngày bắt đầu&#10;    public void setDateBegin(String dateBeginStr) {&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;    }&#10;&#10;    // Setter ngày hoàn thành&#10;    public void setDateCompleted(String dateCompletedStr) {&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;    }&#10;&#10;    // Cập nhật thông tin nhiệm vụ&#10;    public void updateTask(String name, String quest, String dateBeginStr, String dateCompletedStr, String group) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.group = group;&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Tính số ngày còn lại&#10;    public int dayLeft() {&#10;        if (dateCompleted == null) {&#10;            return Integer.MAX_VALUE; // hoặc -1 nếu muốn báo lỗi&#10;        }&#10;        try {&#10;            LocalDateTime now = LocalDateTime.now();&#10;            if (dateCompleted.toLocalDate() == null) return Integer.MAX_VALUE;&#10;            if (now.toLocalDate() == null) return Integer.MAX_VALUE;&#10;            return (int) java.time.Duration.between(now.toLocalDate().atStartOfDay(), dateCompleted.toLocalDate().atStartOfDay()).toDays();&#10;        } catch (Exception e) {&#10;            return Integer.MAX_VALUE;&#10;        }&#10;    }&#10;&#10;&#10;    // Trạng thái deadline&#10;    public String getStatus() {&#10;        if (dateCompleted == null) {&#10;            return &quot;Trạng thái: Không xác định (thiếu ngày hoàn thành)&quot;;&#10;        }&#10;&#10;        int dayLeft = dayLeft();&#10;        String status = &quot;Trạng thái: &quot;;&#10;&#10;        if (dayLeft &lt;= 0) {&#10;            status += &quot;Quá hạn (vượt &quot; + (-dayLeft) + &quot; ngày)&quot;;&#10;        } else {&#10;            status += &quot;Còn hạn (&quot; + dayLeft + &quot; ngày còn lại)&quot;;&#10;        }&#10;&#10;        return status;&#10;    }&#10;&#10;    // Định dạng ngày thành chuỗi&#10;    private String formatDateTime(LocalDateTime dateTime) {&#10;        if (dateTime == null) return &quot;Không xác định&quot;;&#10;        try {&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm dd-MM-yyyy&quot;);&#10;            return dateTime.format(formatter);&#10;        } catch (Exception e) {&#10;            return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    // Hiển thị thông tin Task&#10;    @Override&#10;    public String toString() {&#10;        return name + &quot; | &quot; + quest + &quot; | &quot; + getDateBegin() + &quot; | &quot; + getDateCompleted() + &quot; | &quot; + group;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todo.task;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class Task {&#10;    private String name;                  // Tên nhiệm vụ&#10;    private String quest;                 // Nội dung hoặc mô tả nhiệm vụ&#10;    private LocalDateTime dateBegin;     // Ngày bắt đầu nhiệm vụ&#10;    private LocalDateTime dateCompleted; // Hạn chót hoàn thành nhiệm vụ&#10;    private String group;                // Nhóm nhiệm vụ&#10;    private LocalDateTime updatedAt; // Thời gian chỉnh sửa gần nhất&#10;&#10;    // Constructor đầy đủ&#10;    public Task(String name, String quest, String dateBeginStr, String dateCompletedStr, String group) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.group = group;&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Constructor chỉ có ngày hoàn thành&#10;    public Task(String name, String quest, String dateCompletedStr) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = LocalDateTime.now();&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Chuyển chuỗi định dạng &quot;HH:mm dd-MM-yyyy&quot; thành LocalDateTime&#10;    private LocalDateTime parseDateTime(String dateStr) {&#10;        if (dateStr == null || dateStr.trim().isEmpty()) {&#10;            return null;&#10;        }&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm dd-MM-yyyy&quot;);&#10;        return LocalDateTime.parse(dateStr, formatter);&#10;    }&#10;&#10;    // Getter tên nhiệm vụ&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    // Getter nội dung&#10;    public String getQuest() {&#10;        return quest;&#10;    }&#10;&#10;    // Trả về ngày bắt đầu dưới dạng chuỗi&#10;    public String getDateBegin() {&#10;        return formatDateTime(dateBegin);&#10;    }&#10;&#10;    // Trả về ngày hoàn thành dưới dạng chuỗi&#10;    public String getDateCompleted() {&#10;        return formatDateTime(dateCompleted);&#10;    }&#10;&#10;    // Getter nhóm&#10;    public String getGroup() {&#10;        return group;&#10;    }&#10;&#10;    // Getter thời gian chỉnh sửa&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // Setter tên&#10;    public void setName(String name) {&#10;        this.name = name;&#10;        this.updatedAt = LocalDateTime.now(); // Cập nhật thời gian chỉnh sửa&#10;    }&#10;&#10;    // Setter nội dung&#10;    public void setQuest(String quest) {&#10;        this.quest = quest;&#10;        this.updatedAt = LocalDateTime.now(); // Cập nhật thời gian chỉnh sửa&#10;    }&#10;&#10;    // Setter nhóm&#10;    public void setGroup(String group) {&#10;        this.group = group;&#10;        this.updatedAt = LocalDateTime.now(); // Cập nhật thời gian chỉnh sửa&#10;    }&#10;&#10;    // Setter ngày bắt đầu&#10;    public void setDateBegin(String dateBeginStr) {&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;        this.updatedAt = LocalDateTime.now(); // Cập nhật thời gian chỉnh sửa&#10;    }&#10;&#10;    // Setter ngày hoàn thành&#10;    public void setDateCompleted(String dateCompletedStr) {&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.updatedAt = LocalDateTime.now(); // Cập nhật thời gian chỉnh sửa&#10;    }&#10;&#10;    // Cập nhật thông tin nhiệm vụ&#10;    public void updateTask(String name, String quest, String dateBeginStr, String dateCompletedStr, String group) {&#10;        this.name = name;&#10;        this.quest = quest;&#10;        this.dateBegin = parseDateTime(dateBeginStr);&#10;        this.dateCompleted = parseDateTime(dateCompletedStr);&#10;        this.group = group;&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Tính số ngày còn lại&#10;    public int dayLeft() {&#10;        if (dateCompleted == null) {&#10;            return Integer.MAX_VALUE; // hoặc -1 nếu muốn báo lỗi&#10;        }&#10;        try {&#10;            LocalDateTime now = LocalDateTime.now();&#10;            if (dateCompleted.toLocalDate() == null) return Integer.MAX_VALUE;&#10;            if (now.toLocalDate() == null) return Integer.MAX_VALUE;&#10;            return (int) java.time.Duration.between(now.toLocalDate().atStartOfDay(), dateCompleted.toLocalDate().atStartOfDay()).toDays();&#10;        } catch (Exception e) {&#10;            return Integer.MAX_VALUE;&#10;        }&#10;    }&#10;&#10;&#10;    // Trạng thái deadline&#10;    public String getStatus() {&#10;        if (dateCompleted == null) {&#10;            return &quot;Trạng thái: Không xác định (thiếu ngày hoàn thành)&quot;;&#10;        }&#10;&#10;        int dayLeft = dayLeft();&#10;        String status = &quot;Trạng thái: &quot;;&#10;&#10;        if (dayLeft &lt;= 0) {&#10;            status += &quot;Quá hạn (vượt &quot; + (-dayLeft) + &quot; ngày)&quot;;&#10;        } else {&#10;            status += &quot;Còn hạn (&quot; + dayLeft + &quot; ngày còn lại)&quot;;&#10;        }&#10;&#10;        return status;&#10;    }&#10;&#10;    // Định dạng ngày thành chuỗi&#10;    private String formatDateTime(LocalDateTime dateTime) {&#10;        if (dateTime == null) return &quot;Không xác định&quot;;&#10;        try {&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;HH:mm dd-MM-yyyy&quot;);&#10;            return dateTime.format(formatter);&#10;        } catch (Exception e) {&#10;            return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    // Hiển thị thông tin Task&#10;    @Override&#10;    public String toString() {&#10;        return name + &quot; | &quot; + quest + &quot; | &quot; + getDateBegin() + &quot; | &quot; + getDateCompleted() + &quot; | &quot; + group;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>